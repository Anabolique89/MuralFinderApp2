REACT_APP_API_URL=http://localhost:8000/api/auth/
REACT_APP_GOOGLE_AUTH_API_URL=https://api.muralfinder.net/api/auth/
MapKey=import React, { useState, useEffect } from 'react';
import { LoadScript, GoogleMap, Marker, Autocomplete } from '@react-google-maps/api';
import { Button, TextField, Typography, Paper, IconButton } from '@mui/material';
import PhotoCamera from '@mui/icons-material/PhotoCamera';
import { styled } from '@mui/system';

const Root = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(2),
  backgroundColor: '#3F51B5',
  color: '#fff',
  borderRadius: '8px',
  marginLeft: theme.spacing(2),
  marginRight: theme.spacing(2),
  padding: theme.spacing(2),
}));

const Form = styled('form')(({ theme }) => ({
  display: 'flex',
  flexDirection: 'column',
  gap: theme.spacing(2),
}));

const MapContainer = styled('div')({
  height: '400px',
  position: 'relative',
  borderRadius: '8px',
  overflow: 'hidden',
});

const Input = styled(TextField)({
  '& .MuiInputBase-root': {
    color: '#fff',
  },
  '& .MuiInputLabel-root': {
    color: '#fff',
  },
});

const IconButtonStyled = styled(IconButton)({
  color: '#fff',
});

const ButtonStyled = styled(Button)({
  backgroundColor: '#6200ea',
  color: '#fff',
  '&:hover': {
    backgroundColor: '#3700b3',
  },
});

const SearchBox = styled('input')({
  boxSizing: 'border-box',
  border: '1px solid transparent',
  width: '240px',
  height: '32px',
  padding: '0 12px',
  borderRadius: '3px',
  boxShadow: '0 2px 6px rgba(0, 0, 0, 0.3)',
  fontSize: '14px',
  outline: 'none',
  textOverflow: 'ellipsis',
  position: 'absolute',
  left: '50%',
  marginLeft: '-120px',
  top: '10px',
  zIndex: '10',
});

const apiKey = "AIzaSyBEfyuMVyPbaYNEDUXgbEE_SCoNC1y6kaw";

const AddWall = () => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [photo, setPhoto] = useState(null);
  const [location, setLocation] = useState(null);
  const [autocomplete, setAutocomplete] = useState(null);
  const [mapCenter, setMapCenter] = useState({ lat: 37.7749, lng: -122.4194 });

  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const currentLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };
          setMapCenter(currentLocation);
          setLocation(currentLocation);
        },
        (error) => console.error('Error getting user location:', error)
      );
    } else {
      console.error('Geolocation is not supported by this browser.');
    }
  }, []);

  const handlePlaceChanged = () => {
    const place = autocomplete.getPlace();
    if (place && place.geometry) {
      setMapCenter({
        lat: place.geometry.location.lat(),
        lng: place.geometry.location.lng(),
      });
      setLocation({
        lat: place.geometry.location.lat(),
        lng: place.geometry.location.lng(),
      });
    }
  };

  const handleMapClick = (event) => {
    setLocation({
      lat: event.latLng.lat(),
      lng: event.latLng.lng(),
    });
  };

  const handlePhotoChange = (event) => {
    if (event.target.files[0]) {
      setPhoto(URL.createObjectURL(event.target.files[0]));
    }
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    console.log({ title, description, photo, location });
  };

  return (
    <Root elevation={3}>
      <Typography variant="h4" align="center" gutterBottom>
        Add Wall
      </Typography>
      <Form onSubmit={handleSubmit}>
        <Input
          label="Title"
          variant="outlined"
          fullWidth
          value={title}
          onChange={(e) => setTitle(e.target.value)}
        />
        <Input
          label="Description"
          variant="outlined"
          multiline
          rows={4}
          fullWidth
          value={description}
          onChange={(e) => setDescription(e.target.value)}
        />
        <input
          accept="image/*"
          style={{ display: 'none' }}
          id="upload-photo"
          type="file"
          onChange={handlePhotoChange}
        />
        <label htmlFor="upload-photo">
          <IconButtonStyled component="span">
            <PhotoCamera />
          </IconButtonStyled>
          {photo && <img src={photo} alt="Selected" style={{ maxHeight: '200px', marginTop: '10px' }} />}
        </label>
        <LoadScript googleMapsApiKey={apiKey} libraries={['places']}>
          <MapContainer>
            <Autocomplete
              onLoad={setAutocomplete}
              onPlaceChanged={handlePlaceChanged}
            >
              <SearchBox
                type="text"
                placeholder="Search location"
              />
            </Autocomplete>
            <GoogleMap
              mapContainerStyle={{ height: '100%', width: '100%' }}
              center={mapCenter}
              zoom={12}
              onClick={handleMapClick}
              options={{
                styles: [
                  {
                    featureType: 'road',
                    elementType: 'geometry',
                    stylers: [
                      { color: '#5D176B' },
                      { weight: 2 },
                    ],
                  },
                  {
                    featureType: 'road',
                    elementType: 'labels.text.fill',
                    stylers: [
                      { color: '#000000' },
                    ],
                  },
                  {
                    featureType: 'road',
                    elementType: 'labels.text.stroke',
                    stylers: [
                      { color: '#ffffff' },
                    ],
                  },
                  // Add more styles here as needed
                ],
              }}
            >
              {location && (
                <Marker
                  position={location}
                />
              )}
            </GoogleMap>
          </MapContainer>
        </LoadScript>
        <ButtonStyled
          type="submit"
          variant="contained"
        >
          Submit
        </ButtonStyled>
      </Form>
    </Root>
  );
};

export default AddWall;
